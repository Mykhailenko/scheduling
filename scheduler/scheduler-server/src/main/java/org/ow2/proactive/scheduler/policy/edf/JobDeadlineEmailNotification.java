/*
 * ProActive Parallel Suite(TM):
 * The Open Source library for parallel and distributed
 * Workflows & Scheduling, Orchestration, Cloud Automation
 * and Big Data Analysis on Enterprise Grids & Clouds.
 *
 * Copyright (c) 2007 - 2017 ActiveEon
 * Contact: contact@activeeon.com
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation: version 3 of
 * the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * If needed, contact us to obtain a release under GPL Version 2 or 3
 * or a different license than the AGPL.
 */
package org.ow2.proactive.scheduler.policy.edf;

import java.util.Date;

import org.apache.log4j.Logger;
import org.ow2.proactive.addons.email.exception.EmailException;
import org.ow2.proactive.scheduler.core.JobEmailNotificationException;
import org.ow2.proactive.scheduler.core.properties.PASchedulerProperties;
import org.ow2.proactive.scheduler.job.InternalJob;
import org.ow2.proactive.scheduler.util.SendMail;


public class JobDeadlineEmailNotification {

    public static final String GENERIC_INFORMATION_KEY_EMAIL = "EMAIL";

    private InternalJob job;

    private SendMail sender;

    private static final Logger logger = Logger.getLogger(JobDeadlineEmailNotification.class);

    private static final String SUBJECT_TEMPLATE = "ProActive Job %s might miss its deadline";

    private static final String BODY_TEMPLATE = "Job ID: %s\n" + "Expected finishing time: %s\n" + "Deadline: %s\n" +
                                                "--\n" + "This email was auto-generated by ProActive Scheduling\n";

    public JobDeadlineEmailNotification(InternalJob job) {
        this.job = job;
        this.sender = new SendMail();

    }

    public boolean doSend() throws JobEmailNotificationException {
        if (!PASchedulerProperties.EMAIL_NOTIFICATIONS_ENABLED.getValueAsBoolean()) {
            logger.debug("Notification emails disabled, doing nothing");
            return false;
        }
        try {
            sender.sender(getTo(), getSubject(), getBody());
            return true;
        } catch (EmailException e) {
            throw new JobEmailNotificationException("Error sending email: " + e.getMessage(), e);
        }
    }

    private static String getFrom() throws JobEmailNotificationException {
        String from = PASchedulerProperties.EMAIL_NOTIFICATIONS_SENDER_ADDRESS.getValueAsString();
        if (from == null || from.isEmpty()) {
            throw new JobEmailNotificationException("Sender address not set in scheduler configuration");
        }
        return from;
    }

    private String getTo() throws JobEmailNotificationException {
        String to = job.getGenericInformation().get(GENERIC_INFORMATION_KEY_EMAIL);
        if (to == null) {
            throw new JobEmailNotificationException("Recipient address is not set in generic information");
        }
        return to;
    }

    private String getSubject() {
        String jobID = job.getId().value();
        return String.format(SUBJECT_TEMPLATE, jobID);
    }

    private String getBody() {
        String jobID = job.getId().value();
        Date now = new Date();
        final Date effectiveExpectedExecutionTime = EDFPolicyExtended.getEffectiveExpectedExecutionTime(job, now);
        final Date effectiveDeadline = EDFPolicyExtended.getEffectiveDeadline(job, now);
        return String.format(BODY_TEMPLATE, jobID, effectiveDeadline, effectiveExpectedExecutionTime);
    }
}
